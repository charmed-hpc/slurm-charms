# Copyright 2025 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from abc import ABC, abstractmethod
from collections.abc import Iterator
from os import PathLike
from pathlib import Path
from typing import Any

from slurmutils import (
    AcctGatherConfig,
    AcctGatherConfigEditor,
    CGroupConfig,
    CGroupConfigEditor,
    GresConfig,
    GresConfigEditor,
    OCIConfig,
    OCIConfigEditor,
    SlurmConfig,
    SlurmConfigEditor,
    SlurmdbdConfig,
    SlurmdbdConfigEditor,
)
from slurmutils import (
    BaseEditor as BaseEditor,
)
from slurmutils import (
    Model as Model,
)

from .constants import SLURM_GROUP as SLURM_GROUP
from .constants import SLURM_USER as SLURM_USER

class ConfigManager(ABC):
    _file: str | PathLike
    _mode: int
    _user: str
    _group: str
    def __init__(self, file: str | PathLike, /, mode: int, user: str, group: str) -> None: ...
    def load(self) -> Any: ...
    def dump(self, config: Any) -> None: ...
    def edit(self) -> Iterator[Any]: ...
    @property
    def path(self) -> Path: ...
    @property
    @abstractmethod
    def __editor__(self) -> BaseEditor: ...

class AcctGatherConfigManager(ConfigManager):
    def __init__(self, file: str | PathLike, /, user: str = ..., group: str = ...) -> None: ...
    def load(self) -> AcctGatherConfig: ...
    def dump(self, config: AcctGatherConfig) -> None: ...
    def edit(self) -> Iterator[AcctGatherConfig]: ...
    @property
    def __editor__(self) -> AcctGatherConfigEditor: ...

class CGroupConfigManager(ConfigManager):
    def __init__(self, file: str | PathLike, /, user: str = ..., group: str = ...) -> None: ...
    def load(self) -> CGroupConfig: ...
    def dump(self, config: CGroupConfig) -> None: ...
    def edit(self) -> Iterator[CGroupConfig]: ...
    @property
    def __editor__(self) -> CGroupConfigEditor: ...

class GresConfigManager(ConfigManager):
    def __init__(self, file: str | PathLike, /, user: str = ..., group: str = ...) -> None: ...
    def load(self) -> GresConfig: ...
    def dump(self, config: GresConfig) -> None: ...
    def edit(self) -> Iterator[GresConfig]: ...
    @property
    def __editor__(self) -> GresConfigEditor: ...

class OCIConfigManager(ConfigManager):
    def __init__(self, file: str | PathLike, /, user: str = ..., group: str = ...) -> None: ...
    def load(self) -> OCIConfig: ...
    def dump(self, config: OCIConfig) -> None: ...
    def edit(self) -> Iterator[OCIConfig]: ...
    @property
    def __editor__(self) -> OCIConfigEditor: ...

class SlurmConfigManager(ConfigManager):
    def __init__(self, file: str | PathLike, /, user: str = ..., group: str = ...) -> None: ...
    def load(self) -> SlurmConfig: ...
    def dump(self, config: SlurmConfig) -> None: ...
    def edit(self) -> Iterator[SlurmConfig]: ...
    @property
    def __editor__(self) -> SlurmConfigEditor: ...

class SlurmdbdConfigManager(ConfigManager):
    def __init__(self, file: str | PathLike, /, user: str = ..., group: str = ...) -> None: ...
    def load(self) -> SlurmdbdConfig: ...
    def dump(self, config: SlurmdbdConfig) -> None: ...
    def edit(self) -> Iterator[SlurmdbdConfig]: ...
    @property
    def __editor__(self) -> SlurmdbdConfigEditor: ...
